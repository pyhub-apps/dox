name: Release

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      bump_head:
        description: 'Bump head version before release'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.headver.outputs.version }}
      head: ${{ steps.headver.outputs.head }}
      yearweek: ${{ steps.headver.outputs.yearweek }}
      build: ${{ steps.headver.outputs.build }}
      tag: ${{ steps.headver.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump head version (if requested)
        if: github.event.inputs.bump_head == 'true'
        run: |
          chmod +x ./scripts/headver.sh
          ./scripts/headver.sh --bump-head

      - name: Calculate version
        id: headver
        run: |
          chmod +x ./scripts/headver.sh
          VERSION=$(./scripts/headver.sh)
          HEAD=$(./scripts/headver.sh --head)
          YEARWEEK=$(./scripts/headver.sh --yearweek)
          BUILD=$(./scripts/headver.sh --build)
          TAG="v${VERSION}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "head=${HEAD}" >> $GITHUB_OUTPUT
          echo "yearweek=${YEARWEEK}" >> $GITHUB_OUTPUT
          echo "build=${BUILD}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          echo "📋 Version Information:"
          echo "   Version: ${VERSION}"
          echo "   Tag: ${TAG}"
          echo "   Head: ${HEAD}"
          echo "   YearWeek: ${YEARWEEK}"
          echo "   Build: ${BUILD}"

      - name: Update Cargo.toml version
        run: |
          VERSION="${{ steps.headver.outputs.version }}"
          sed -i "s/^version = .*/version = \"${VERSION}\"/" crates/dox-cli/Cargo.toml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add crates/dox-cli/Cargo.toml
          git diff --staged --quiet || git commit -m "chore: bump version to ${VERSION}"

  build:
    name: Build
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: dox-linux-amd64
            archive: tar.gz
            features: "--features keyring,pdf"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: dox-linux-arm64
            archive: tar.gz
            features: "--no-default-features --features keyring"
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            name: dox-macos-amd64
            archive: tar.gz
            features: "--features keyring,pdf"
          - os: macos-latest
            target: aarch64-apple-darwin
            name: dox-macos-arm64
            archive: tar.gz
            features: "--features keyring,pdf"
          
          # Windows
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            name: dox-windows-amd64.exe
            archive: zip
            features: "--no-default-features --features keyring"
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            name: dox-windows-arm64.exe
            archive: zip
            features: "--no-default-features --features keyring"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Add ARM64 target for Windows
        if: matrix.target == 'aarch64-pc-windows-msvc'
        run: rustup target add aarch64-pc-windows-msvc

      - name: Install cross (for cross-compilation)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Update Cargo.toml version
        shell: bash
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            sed -i "s/^version = .*/version = \"${VERSION}\"/" crates/dox-cli/Cargo.toml
          else
            sed -i.bak "s/^version = .*/version = \"${VERSION}\"/" crates/dox-cli/Cargo.toml
          fi

      - name: Build binary
        shell: bash
        timeout-minutes: 30
        run: |
          FEATURES="${{ matrix.features || '--features keyring,pdf' }}"
          case "${{ matrix.target }}" in
            "aarch64-unknown-linux-gnu")
              echo "Building Linux ARM64 with cross-rs..."
              cross build --bin dox --target ${{ matrix.target }} --release ${FEATURES}
              ;;
            "aarch64-pc-windows-msvc")
              echo "Building Windows ARM64 with native cargo..."
              cargo build --bin dox --target ${{ matrix.target }} --release ${FEATURES}
              ;;
            *)
              echo "Building ${{ matrix.target }} with native cargo..."
              cargo build --bin dox --target ${{ matrix.target }} --release ${FEATURES}
              ;;
          esac

      - name: Prepare binary
        shell: bash
        run: |
          TARGET_DIR="target/${{ matrix.target }}/release"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BINARY_PATH="${TARGET_DIR}/dox.exe"
            FINAL_BINARY="${{ matrix.name }}"
          else
            BINARY_PATH="${TARGET_DIR}/dox"
            FINAL_BINARY="${{ matrix.name }}"
          fi
          
          cp "${BINARY_PATH}" "${FINAL_BINARY}"
          
          # Strip binary (except on Windows ARM64)
          if [[ "${{ runner.os }}" != "Windows" ]] && [[ "${{ matrix.target }}" != "aarch64-pc-windows-msvc" ]]; then
            strip "${FINAL_BINARY}" || true
          fi
          
          echo "BINARY_NAME=${FINAL_BINARY}" >> $GITHUB_ENV

      - name: Create archive
        shell: bash
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          BINARY_NAME="${{ env.BINARY_NAME }}"
          
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            ARCHIVE_NAME="dox-v${VERSION}-${{ matrix.target }}.zip"
            7z a "${ARCHIVE_NAME}" "${BINARY_NAME}"
          else
            ARCHIVE_NAME="dox-v${VERSION}-${{ matrix.target }}.tar.gz"
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}"
          fi
          
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          
          # Generate checksum
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile "${ARCHIVE_NAME}" SHA256 | head -n 2 | tail -n 1 > "${ARCHIVE_NAME}.sha256"
          else
            shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.ARCHIVE_NAME }}.sha256
          retention-days: 7

  create-release:
    name: Create Release
    needs: [version, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
          find artifacts -name "*.sha256" | xargs -I {} cp {} release-assets/
          
          # Create combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt
          
          echo "📦 Release assets:"
          ls -la

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          TAG="${{ needs.version.outputs.tag }}"
          
          cat << EOF > release_notes.md
          # 🚀 dox ${VERSION}
          
          HeadVer: Head ${{ needs.version.outputs.head }}, Week ${{ needs.version.outputs.yearweek }}, Build ${{ needs.version.outputs.build }}
          
          ## 📦 Downloads
          
          ### Windows
          - [dox-v${VERSION}-x86_64-pc-windows-msvc.zip](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-x86_64-pc-windows-msvc.zip) (AMD64)
          - [dox-v${VERSION}-aarch64-pc-windows-msvc.zip](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-aarch64-pc-windows-msvc.zip) (ARM64)
          
          ### macOS
          - [dox-v${VERSION}-x86_64-apple-darwin.tar.gz](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-x86_64-apple-darwin.tar.gz) (Intel)
          - [dox-v${VERSION}-aarch64-apple-darwin.tar.gz](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-aarch64-apple-darwin.tar.gz) (Apple Silicon)
          
          ### Linux
          - [dox-v${VERSION}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-x86_64-unknown-linux-gnu.tar.gz) (AMD64)
          - [dox-v${VERSION}-aarch64-unknown-linux-gnu.tar.gz](https://github.com/pyhub-apps/dox/releases/download/${TAG}/dox-v${VERSION}-aarch64-unknown-linux-gnu.tar.gz) (ARM64)
          
          ## 🔒 Verification
          - [checksums.txt](https://github.com/pyhub-apps/dox/releases/download/${TAG}/checksums.txt) - SHA256 checksums
          
          ## 🛠️ Installation
          
          ### Quick Install (Unix-like systems)
          \`\`\`bash
          curl -fsSL https://github.com/pyhub-apps/dox/releases/download/${TAG}/install.sh | bash
          \`\`\`
          
          ### Manual Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Move the \`dox\` binary to your PATH
          
          ## 📋 What's New
          
          EOF
          
          # Add recent commit messages
          git log --oneline --since="1 week ago" --pretty=format:"- %s" >> release_notes.md || echo "- Initial release" >> release_notes.md

      - name: Create install script
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          cat << 'EOF' > release-assets/install.sh
          #!/bin/bash
          # dox installation script
          
          set -e
          
          # Configuration
          REPO="pyhub-apps/dox"
          VERSION="v{{ VERSION }}"
          INSTALL_DIR="/usr/local/bin"
          
          # Detect platform
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case $OS in
            linux)
              case $ARCH in
                x86_64) PLATFORM="x86_64-unknown-linux-gnu" ;;
                aarch64|arm64) PLATFORM="aarch64-unknown-linux-gnu" ;;
                *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
              esac
              ARCHIVE_EXT="tar.gz"
              ;;
            darwin)
              case $ARCH in
                x86_64) PLATFORM="x86_64-apple-darwin" ;;
                arm64) PLATFORM="aarch64-apple-darwin" ;;
                *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
              esac
              ARCHIVE_EXT="tar.gz"
              ;;
            *)
              echo "Unsupported OS: $OS"
              exit 1
              ;;
          esac
          
          # Download and install
          DOWNLOAD_URL="https://github.com/${REPO}/releases/download/${VERSION}/dox-${VERSION}-${PLATFORM}.${ARCHIVE_EXT}"
          TEMP_DIR=$(mktemp -d)
          
          echo "📦 Downloading dox ${VERSION} for ${OS}/${ARCH}..."
          curl -fL "$DOWNLOAD_URL" -o "${TEMP_DIR}/dox.${ARCHIVE_EXT}"
          
          echo "📂 Extracting..."
          cd "$TEMP_DIR"
          if [[ "$ARCHIVE_EXT" == "tar.gz" ]]; then
            tar -xzf "dox.${ARCHIVE_EXT}"
          else
            unzip "dox.${ARCHIVE_EXT}"
          fi
          
          echo "🚀 Installing to ${INSTALL_DIR}..."
          sudo mkdir -p "$INSTALL_DIR"
          sudo cp dox* "$INSTALL_DIR/dox"
          sudo chmod +x "$INSTALL_DIR/dox"
          
          echo "✅ dox installed successfully!"
          echo "   Run 'dox --help' to get started"
          
          # Cleanup
          rm -rf "$TEMP_DIR"
          EOF
          
          # Replace template variable
          sed -i "s/{{ VERSION }}/${VERSION}/g" release-assets/install.sh
          chmod +x release-assets/install.sh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: "dox ${{ needs.version.outputs.version }}"
          body_path: release_notes.md
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          git tag -f latest
          git push -f origin latest